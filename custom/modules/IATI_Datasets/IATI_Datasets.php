<?php

/**
 * The IATI Registry SuiteCRM Extension was developed by Open Data Services Cooperative Ltd.
 * in its work for the IATI Secretariat and includes code automatically generated by SuiteCRM.
 *
 * SugarCRM Community Edition is a customer relationship management program developed by
 * SugarCRM, Inc. Copyright (C) 2004-2013 SugarCRM Inc.
 *
 * SuiteCRM is an extension to SugarCRM Community Edition developed by SalesAgility Ltd.
 * Copyright (C) 2011 - 2018 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SUGARCRM, SUGARCRM DISCLAIMS THE WARRANTY
 * OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along with
 * this program; if not, see http://www.gnu.org/licenses or write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 *
 * You can contact SugarCRM, Inc. headquarters at 10050 North Wolfe Road,
 * SW2-130, Cupertino, CA 95014, USA. or at email address contact@sugarcrm.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License version 3,
 * these Appropriate Legal Notices must retain the display of the "Powered by
 * SugarCRM" logo and "Supercharged by SuiteCRM" logo. If the display of the logos is not
 * reasonably feasible for technical reasons, the Appropriate Legal Notices must
 * display the words "Powered by SugarCRM" and "Supercharged by SuiteCRM".
 */


class IATI_Datasets extends Basic
{
    public $new_schema = true;
    public $module_dir = 'IATI_Datasets';
    public $object_name = 'IATI_Datasets';
    public $table_name = 'iati_datasets';
    public $importable = true;

    public $id;
    public $name;
    public $date_entered;
    public $date_modified;
    public $modified_user_id;
    public $modified_by_name;
    public $created_by;
    public $created_by_name;
    public $description;
    public $deleted;
    public $created_by_link;
    public $modified_user_link;
    public $assigned_user_id;
    public $assigned_user_name;
    public $assigned_user_link;
    public $SecurityGroups;
    public $iati_ckan_id;
    public $iati_licence_id;
    public $iati_url_update_date;
    public $iati_metadata_update_date;
    public $iati_short_name;
    public $iati_source_type;
    public $iati_dataset_url;
    public $iati_visibility;

    /**
     * Counts the number of public datasets for the owner
     * of this dataset.
     * 
     * This supports the storage and viewing of the number of public
     * datasets alongside an Organisation (Account) record.  There
     * might be better ways to implement this functionality.  Some
     * thoughts here:
     *
     * 1. The field is added as a (custom) DB field in the Account
     * module, whereas a non-db field might be better.
     * 2. I'm adding this calculation here, whereas logically it
     * probably should be in the Account class, but that would
     * require modifying the existing module and I'm not sure
     * whether that is possible for an extension.
     * 3. I could implement as a logic hook, but it would be an
     * `after_save` hook attached to a dataset - see (2) and I
     * thought that it might as well go here since we're adding
     * a custom module anyway.
     * 
     * @param string ID for the owner organisation $owner_org_id
     * @return int Number of datasets.
     */
    public function count_num_public_datasets_for_owner($owner_org_id) {
        $query = "SELECT COUNT(*) AS num_datasets
                  FROM iati_datasets_owner_org_c o
                  JOIN iati_datasets d
                  ON d.id = o.iati_dataset_id
                  WHERE o.owner_org_id = '" . $this->db->quote($owner_org_id) . "' AND d.iati_visibility='public' AND d.deleted=0";
        $result = $this->db->query($query, true, ' Error finding datasets for org <' . $owner_org_id . '>: ');

        if (!($result)) return NULL;

        $row = $this->db->fetchByAssoc($result);
        if (is_null($row["num_datasets"])) {
            LoggerManager::getLogger()->error("IATI_Datasets::find_num_public_datasets_for_owner() - query result does not have num_datasets field");
            return NULL;
        }

        return $row["num_datasets"];
    }

    public function save($check_notify = false)
    {
        $save_result = parent::save();

        // update the number of public datasets field in the
        // owner organisation record.
        $num_datasets = $this->count_num_public_datasets_for_owner($this->owner_org_id);
        if (!(is_null($num_datasets))) {
            $bean = BeanFactory::getBean('Accounts', $this->owner_org_id);
            $bean->iati_num_published_datasets_c = $num_datasets;
            $bean->save();
        }

        return $save_result;
    }

    public function bean_implements($interface)
    {
        switch ($interface) {
            case 'ACL':
                return true;
        }

        return false;
    }

}
